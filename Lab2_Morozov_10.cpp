/* ------------------------------------------------------------------------------------	*\
	Лабораторная работа №2 по курсу Программирование на языке ассемблера
	Вариант №10.
	Выполнил студент Морозов С. Группа 344

	Исходный модуль Lab2cpp_Morozov_10.cpp

	Задание: 
		Реализовать преобразование изображения с использованием оператора Лапласа
        с помощью технологии AVX.     
	
	void Filter_cpp( unsigned char* pDst, unsigned char* pSrc, int Width, int Height ) ;
	Параметры:
	pDst   - адрес матрицы пикселов, в которую необходимо поместить результат обработки
	pSrc   - адрес матрицы пикселов исходного изображения
	Width  - ширина изображения в пикселах (количество столбцов)	
	Height - высота изображения в пикселах (количество строк)
\* ------------------------------------------------------------------------------------  */

#include "stdafx.h"

//Матрица, определяющая ядро фильтра для оператора Лапласа (используется в комментариях, для пояснений)
//int mtrxKernel[3][3] = 
//{
//	{ 0,  1, 0 },
//	{ 1, -4, 1 },
//	{ 0,  1, 0 }
//};

// Функция, осуществляющая преобразование одного пиксела изображения. Передаваемый пиксел умножается на
// центральный элемент элемент матрицы, а окружающие его пикселы на соответствующие элементы матрицы.
// Все произведения суммируются для получения пиксела-результата (для внутренних пикселов)
unsigned char Kernel(unsigned char* Pixel, int Width) 
{
	int pixColor = 0; //Цвет результата
	//В целях оптимизации произведения пикселов на угловые элементы ядра не вычисляются, так как заведомо равны нулю.
	UINT32 pix = *(Pixel - Width);     //верхний-средний пиксел
	pixColor   += pix;                 //pixColor += pix * mtrxKernel[0][1]; 
	pix        = *(Pixel - 1);         //средний-левый пиксел
	pixColor   += pix;                 //pixColor += pix * mtrxKernel[1][0]; 
	pix        = *Pixel;               //текущий пиксел
	pixColor   += -4 * pix;            //pixColor += pix * mtrxKernel[1][1];
	pix        = *(Pixel + 1);         //средний-правый пиксел
	pixColor   += pix;                 //pixColor += pix * mtrxKernel[1][2];
	pix        = *(Pixel + Width);     //нижний-средний пиксел
	pixColor   += pix;                 //pixColor += pix * mtrxKernel[2][1];
	// Обработка переполнения. В результате операций цвет мог выйти за пределы 0..255
	if (pixColor > 0xFF) pixColor = 0xFF;
	if (pixColor < 0x00) pixColor = 0x00;

	return static_cast<unsigned char>(pixColor);
}

void Filter_cpp( unsigned char* pDst, unsigned char* pSrc, int Width, int Height )
{
	memcpy(pDst, pSrc, Width); //Копирование первой строки пикселов 
	//Преобразование внутренних пикселов изображение фильтром Лапласа
	for (int i = 1; i < Height - 1; i++)
	{
		pDst[i * Width] = pSrc[i * Width]; //Копирование крайнего левого пиксела текущей строки пикселов
		pDst[(i + 1) * Width - 1] = pSrc[(i + 1) * Width - 1]; //Копирование крайнего правого пиксела текущей строки
		//Запись пикселов в выходную матрицу с примененным к ним фильтром Лапласа (для внутренних пикселов)
		for (int j = 1; j < Width - 1; j++)
		{
			pDst[i * Width + j] = Kernel(pSrc + i * Width + j, Width);
		}
	}
	memcpy(pDst + Width * (Height - 1), pSrc + Width * (Height - 1), Width); //Копирование последней строки пикселов
}
